package com.demodaggerformdatafileupload;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent;
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyResponseEvent;
import com.demodaggerformdatafileupload.handler.EndpointHandler;
import com.syndicate.deployment.annotations.environment.EnvironmentVariable;
import com.syndicate.deployment.annotations.environment.EnvironmentVariables;
import com.syndicate.deployment.annotations.lambda.LambdaHandler;
import com.syndicate.deployment.model.DeploymentRuntime;
import com.syndicate.deployment.model.RetentionSetting;

import java.util.Map;

@LambdaHandler(
        lambdaName = "api-handler", roleName = "api-handler-role",
        runtime = DeploymentRuntime.JAVA17, logsExpiration = RetentionSetting.SYNDICATE_ALIASES_SPECIFIED,
        isPublishVersion = true, aliasName = "${lambdas_alias_name}"
)
@EnvironmentVariables(value = {
        @EnvironmentVariable(key = "REGION", value = "${region}"),
        @EnvironmentVariable(key = "STORAGE_BUCKET_NAME", value = "${storage_bucket_name}")}
)
public class ApiHandler implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {

    // The DaggerApplication class is generated by the Dagger framework at compile time (located in the target folder).
    private final Application application = DaggerApplication.create();
    private final EndpointHandler generalHandler = application.getGeneralApiHandler();
    private final Map<String, String> corsHeaders = application.getCorsHeaders();

    @Override
    public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent requestEvent, Context context) {
        return generalHandler.handle(requestEvent, context).withHeaders(corsHeaders);
    }

}
