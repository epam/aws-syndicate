## Below example shows how to look up an item with a Primary Key of "id" from GraphQL arguments
## The helper $util.dynamodb.toDynamoDBJson automatically converts to a DynamoDB formatted request
## There is a "context" object with arguments, identity, headers, and parent field information you can access.
## It also has a shorthand notation avaialable:
##  - $context or $ctx is the root object
##  - $ctx.arguments or $ctx.args contains arguments
##  - $ctx.identity has caller information, such as $ctx.identity.username
##  - $ctx.request.headers contains headers, such as $context.request.headers.xyz
##  - $ctx.source is a map of the parent field, for instance $ctx.source.xyz
## Read more: https://docs.aws.amazon.com/appsync/latest/devguide/resolver-mapping-template-reference.html

#set($validModes = ["singlePlayer", "multiPlayer"])
#set($mode = $ctx.args.input.mode)

#if(!$validModes.contains($mode))
    $util.error("Invalid input for game mode. Allowed: '[singlePlayer | multiPlayer]'.", "InvalidGameModeError")

#else

    {
        "version" : "2018-05-29",
        "operation" : "PutItem",
        "key" : {
            "PK": $util.dynamodb.toDynamoDBJson($ctx.args.input.name),
            "SK": $util.dynamodb.toDynamoDBJson($ctx.args.input.name)
        },
        "attributeValues" : {
        	"id": $util.dynamodb.toDynamoDBJson($util.autoId()),
            "mode": $util.dynamodb.toDynamoDBJson($mode),
        },
        "condition": {
            "expression": "attribute_not_exists(PK) and attribute_not_exists(SK)"
        }
    }
#end